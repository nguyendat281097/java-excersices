package main;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Main {

	public static int solution(int[] a) {
		Arrays.sort(a);
		int ai, aj, result = 1;
		for (int i = 0; i < a.length - 1; i++) {
			ai = a[i];
			aj = a[i + 1];
			System.out.println(ai + "-" + aj);
			if (ai <= 0) {
				continue;
			}
			if (ai == aj || aj == (ai + 1)) {
				continue;
			} else {
				result = ai + 1;
			}
		}
		if (result <= a[a.length - 1])
			return result;
		return -1;
	}

	public static void main(String[] args) {
		int[] a = { 1, -3, 4, 0, 2, 4, 6, 1 };
		int[] b = { 1, 1, 3, 4, 4, 4 };
//		System.out.println(solution(a));
//		solution2(b);
		int[] c = { 1, 1, 2, 3, 3 };
//		System.out.println(solution(c, 3));
		
		int N = 6;
	     
	    // Numerator Array
	    int num[] = { 1, 40, 20, 5, 6, 7 };
	     
	    // Denominator Array
	    int den[] = { 10, 40, 2, 5, 12, 14 };
	     
	    System.out.print(countUniqueFractions(num, den, N));
	}

	public static int solution2(int[] A) {
		HashMap<Integer, Integer> elementPresentMap = new HashMap<>();
		for (int i = 0; i < A.length; i++) {
			if (!elementPresentMap.containsKey(A[i])) {
				elementPresentMap.put(A[i], 1);
			} else {
				elementPresentMap.computeIfPresent(A[i], (k, v) -> v + 1);
			}
		}
		System.out.println(elementPresentMap);
		int step = 0;
		int lengthMax = 0;
		for (Map.Entry<Integer, Integer> set : elementPresentMap.entrySet()) {
			lengthMax += set.getKey();
			if (lengthMax < A.length) {
				lengthMax += set.getKey();
			} else {
				step += set.getValue();
				elementPresentMap.remove(set.getKey());
			}
		}
		System.out.println(elementPresentMap);
		System.out.println(step);
		return 0;
	}

	public static boolean solution(int[] A, int K) {
		int n = A.length;
		for (int i = 0; i < n - 1; i++) {
			if (A[i] + 1 < A[i + 1])
				return false;
		}
		if (A[0] != 1 && A[n - 1] != K)
			return false;
		else
			return true;
	}

	static int gcd(int a, int b) {
		if (b == 0)
			return a;

		return gcd(b, a % b);
	}

	static int countUniqueFractions(int num[], int den[], int N) {

// Hash-map to store the fractions
// in its lowest form
		Map<pair, Integer> mp = new HashMap<>();

// Loop to iterate over the
// fractions and store is lowest
// form in the hash-map
		for (int i = 0; i < N; i++) {

// To find the Lowest form
			int number = num[i] / gcd(num[i], den[i]);
			int denom = den[i] / gcd(num[i], den[i]);
			pair tmp = new pair(number, denom);
			mp.put(tmp, 1);
		}
		System.out.println(mp.toString());
		return mp.size();
	}

	static class pair {
		int x, y;

		pair(int x, int y) {
			this.x = x;
			this.y = y;
		}

		@Override
		public int hashCode() {
			return this.x;
		}

		@Override
		public boolean equals(Object obj) {

			// If both the object references are
			// referring to the same object.
			if (this == obj)
				return true;

			// It checks if the argument is of the
			// type pair by comparing the classes
			// of the passed argument and this object.
			// if(!(obj instanceof pair)) return
			// false; ---> avoid.
			if (obj == null || obj.getClass() != this.getClass())
				return false;

			// Type casting of the argument.
			pair geek = (pair) obj;

			// comparing the state of argument with
			// the state of 'this' Object.
			return (geek.x == this.x && geek.y == this.y);
		}
	}
}
